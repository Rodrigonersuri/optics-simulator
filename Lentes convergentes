<script type="text/javascript">
        var gk_isXlsx = false;
        var gk_xlsxFileLookup = {};
        var gk_fileData = {};
        function filledCell(cell) {
          return cell !== '' && cell != null;
        }
        function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                // Convert sheet to JSON to filter blank rows
                var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
                // Filter out blank rows (rows where all cells are empty, null, or undefined)
                var filteredData = jsonData.filter(row => row.some(filledCell));

                // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                var headerRowIndex = filteredData.findIndex((row, index) =>
                  row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                // Fallback
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                  headerRowIndex = 0;
                }

                // Convert filtered JSON back to CSV
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
        }
        </script><!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simulador de Óptica - Versión Web</title>
    <style>
        body {
            margin: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            background: linear-gradient(180deg, #e0e7ff, #f3f4f6);
            font-family: Arial, sans-serif;
        }
        canvas {
            border: 2px solid #333;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            background: #ffffff;
        }
        .title {
            font-size: 24px;
            font-weight: bold;
            color: #1e3a8a;
            margin-bottom: 10px;
            text-align: center;
        }
        .instructions {
            font-size: 16px;
            color: #4b5563;
            max-width: 600px;
            text-align: center;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="title">Simulador de Óptica</div>
    <div class="instructions">
        Usa los sliders para ajustar la posición del objeto y la altura del punto de emisión. Activa/desactiva los rayos y la imagen con los botones.
    </div>
    <canvas id="canvas" width="800" height="600"></canvas>
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');

        // Configuración inicial
        const WIDTH = 800, HEIGHT = 600;
        const FPS = 60;

        // Colores
        const WHITE = '#FFFFFF', BLACK = '#000000', RED = '#FF0000', BLUE = '#0000FF';
        const GREEN = '#00FF00', PURPLE = '#800080', ORANGE = '#FFA500';
        const GRAY = '#C8C8C8', LIGHT_GRAY = '#DCDCDC', DASHED_GRAY = '#969696';

        // Parámetros de la simulación
        const lensX = WIDTH / 2;
        const lensHeight = 250;
        const arrowHeight = 100;
        const focalLength = 100;
        const minObjectDistance = 10;
        const maxObjectDistance = 3 * focalLength;
        let arrowX = lensX - 2 * focalLength;

        // Variables de estado
        let showRay1 = true, showRay2 = true, showRay3 = true, showImage = true;
        let ray1Progress = 1.0, ray2Progress = 1.0, ray3Progress = 1.0;
        let animationSpeed = 0.02;
        let rayHeight = arrowHeight;

        // Configuración de los botones
        const buttonWidth = 120, buttonHeight = 30, buttonMargin = 10, buttonY = HEIGHT - 50;
        const squareSize = 15;
        const buttons = [
            { rect: { x: 20, y: buttonY, w: buttonWidth, h: buttonHeight }, text: 'Rayo 1', color: GREEN, toggle: () => { showRay1 = !showRay1; ray1Progress = showRay1 ? 0.0 : 1.0; } },
            { rect: { x: 20 + (buttonWidth + buttonMargin), y: buttonY, w: buttonWidth, h: buttonHeight }, text: 'Rayo 2', color: PURPLE, toggle: () => { showRay2 = !showRay2; ray2Progress = showRay2 ? 0.0 : 1.0; } },
            { rect: { x: 20 + 2 * (buttonWidth + buttonMargin), y: buttonY, w: buttonWidth, h: buttonHeight }, text: 'Rayo 3', color: ORANGE, toggle: () => { showRay3 = !showRay3; ray3Progress = showRay3 ? 0.0 : 1.0; } },
            { rect: { x: 20 + 3 * (buttonWidth + buttonMargin), y: buttonY, w: 150, h: buttonHeight }, text: 'Imagen Generada', color: RED, toggle: () => { showImage = !showImage; } }
        ];

        // Configuración de los sliders
        const sliderX = 20, sliderY = 20, sliderWidth = 200, sliderHeight = 10;
        const sliderHandleWidth = 10, sliderHandleHeight = 20;
        let sliderHandleX = sliderX + sliderWidth;
        let sliderDragging = false;

        const objectSliderX = 20, objectSliderY = 60, objectSliderWidth = 200, objectSliderHeight = 10;
        const objectSliderHandleWidth = 10, objectSliderHandleHeight = 20;
        let objectSliderHandleX = objectSliderX + (lensX - arrowX - minObjectDistance) / (maxObjectDistance - minObjectDistance) * objectSliderWidth;
        let objectSliderDragging = false;

        function drawArrow(x, y, height, color = RED, dashed = false) {
            ctx.beginPath();
            if (dashed) {
                const dashLength = 5;
                const totalLength = Math.abs(height);
                const numDashes = Math.floor(totalLength / (dashLength * 2));
                const sign = height > 0 ? 1 : -1;
                for (let i = 0; i < numDashes; i++) {
                    const dashStartY = y - i * dashLength * 2 * sign;
                    const dashEndY = y - (i * dashLength * 2 + dashLength) * sign;
                    ctx.moveTo(x, dashStartY);
                    ctx.lineTo(x, dashEndY);
                }
                const tipY = y - height;
                ctx.moveTo(x, tipY);
                ctx.lineTo(x - 10, tipY + 10 * sign);
                ctx.moveTo(x, tipY);
                ctx.lineTo(x + 10, tipY + 10 * sign);
            } else {
                ctx.moveTo(x, y);
                ctx.lineTo(x, y - height);
                const tipY = y - height;
                ctx.moveTo(x, tipY);
                ctx.lineTo(x - 10, tipY + 10 * (height > 0 ? 1 : -1));
                ctx.moveTo(x, tipY);
                ctx.lineTo(x + 10, tipY + 10 * (height > 0 ? 1 : -1));
            }
            ctx.strokeStyle = color;
            ctx.lineWidth = 3;
            ctx.stroke();
        }

        function drawLens(x, height) {
            ctx.beginPath();
            ctx.moveTo(x, HEIGHT / 2 - height / 2);
            ctx.lineTo(x, HEIGHT / 2 + height / 2);
            ctx.lineWidth = 5;
            ctx.strokeStyle = BLUE;
            ctx.stroke();
            const arrowSize = 20;
            ctx.beginPath();
            ctx.moveTo(x, HEIGHT / 2 - height / 2);
            ctx.lineTo(x - arrowSize, HEIGHT / 2 - height / 2 - arrowSize);
            ctx.lineTo(x + arrowSize, HEIGHT / 2 - height / 2 - arrowSize);
            ctx.closePath();
            ctx.fillStyle = BLUE;
            ctx.fill();
            ctx.beginPath();
            ctx.moveTo(x, HEIGHT / 2 + height / 2);
            ctx.lineTo(x - arrowSize, HEIGHT / 2 + height / 2 + arrowSize);
            ctx.lineTo(x + arrowSize, HEIGHT / 2 + height / 2 + arrowSize);
            ctx.closePath();
            ctx.fill();
        }

        function drawOpticalAxis() {
            ctx.beginPath();
            ctx.moveTo(0, HEIGHT / 2);
            ctx.lineTo(WIDTH, HEIGHT / 2);
            ctx.strokeStyle = BLACK;
            ctx.lineWidth = 2;
            ctx.stroke();
        }

        function drawFocalPoints(lensX, focalLength) {
            ctx.beginPath();
            ctx.arc(lensX - focalLength, HEIGHT / 2, 5, 0, 2 * Math.PI);
            ctx.fillStyle = BLACK;
            ctx.fill();
            ctx.beginPath();
            ctx.arc(lensX + focalLength, HEIGHT / 2, 5, 0, 2 * Math.PI);
            ctx.fill();
            ctx.font = '20px Arial';
            ctx.fillStyle = BLACK;
            ctx.fillText('F', lensX - focalLength - 10, HEIGHT / 2 + 30);
            ctx.fillText("F'", lensX + focalLength - 10, HEIGHT / 2 + 30);
        }

        function drawDashedLine(startX, startY, endX, endY, color, dashLength = 5) {
            ctx.beginPath();
            ctx.strokeStyle = color;
            ctx.lineWidth = 2;
            const dx = endX - startX;
            const dy = endY - startY;
            const distance = Math.sqrt(dx * dx + dy * dy);
            const numDashes = Math.floor(distance / (dashLength * 2));
            for (let i = 0; i < numDashes; i++) {
                const dashStartX = startX + i * dx / numDashes * 2;
                const dashStartY = startY + i * dy / numDashes * 2;
                const dashEndX = startX + (i * 2 + 1) * dx / numDashes;
                const dashEndY = startY + (i * 2 + 1) * dy / numDashes;
                ctx.moveTo(dashStartX, dashStartY);
                ctx.lineTo(dashEndX, dashEndY);
            }
            ctx.stroke();
        }

        function drawAnimatedRay(p1x, p1y, p2x, p2y, p3x, p3y, progress, color, isVirtual) {
            ctx.beginPath();
            if (progress < 0.5) {
                const frac = progress * 2;
                const endX = p1x + frac * (p2x - p1x);
                const endY = p1y + frac * (p2y - p1y);
                ctx.moveTo(p1x, p1y);
                ctx.lineTo(endX, endY);
                ctx.strokeStyle = color;
                ctx.lineWidth = 2;
                ctx.stroke();
            } else {
                ctx.moveTo(p1x, p1y);
                ctx.lineTo(p2x, p2y);
                ctx.strokeStyle = color;
                ctx.lineWidth = 2;
                ctx.stroke();
                const frac = (progress - 0.5) * 2;
                const dx = p3x - p2x;
                const dy = p3y - p2y;
                const norm = Math.sqrt(dx * dx + dy * dy) + 1e-6;
                const dirX = dx / norm;
                const dirY = dy / norm;
                if (!isVirtual) {
                    const endX = p2x + frac * dx;
                    const endY = p2y + frac * dy;
                    ctx.beginPath();
                    ctx.moveTo(p2x, p2y);
                    ctx.lineTo(endX, endY);
                    ctx.strokeStyle = color;
                    ctx.lineWidth = 2;
                    ctx.stroke();
                } else {
                    const realEndX = p2x - dirX * WIDTH;
                    const realEndY = p2y - dirY * WIDTH;
                    const endRealX = p2x + frac * (realEndX - p2x);
                    const endRealY = p2y + frac * (realEndY - p2y);
                    ctx.beginPath();
                    ctx.moveTo(p2x, p2y);
                    ctx.lineTo(endRealX, endRealY);
                    ctx.strokeStyle = color;
                    ctx.lineWidth = 2;
                    ctx.stroke();
                    const endVirtualX = p2x + frac * dx;
                    const endVirtualY = p2y + frac * dy;
                    drawDashedLine(p2x, p2y, endVirtualX, endVirtualY, color);
                }
            }
        }

        function calculateImagePosition(objectDistance, focalLength) {
            if (objectDistance <= 0) return [0, 0];
            const doInv = 1 / objectDistance;
            const dfInv = 1 / focalLength;
            if (Math.abs(dfInv - doInv) < 1e-6) return [Infinity, -Infinity];
            const imageDistance = 1 / (dfInv - doInv);
            const magnification = -imageDistance / objectDistance;
            return [imageDistance, magnification];
        }

        function drawRays(arrowX, rayY, lensX, focalLength, imageX, imageTipY, isVirtual) {
            const p3x = imageX, p3y = imageTipY;
            if (showRay1) {
                const p1x = arrowX, p1y = rayY;
                const p2x = lensX, p2y = rayY;
                drawAnimatedRay(p1x, p1y, p2x, p2y, p3x, p3y, ray1Progress, GREEN, isVirtual);
            }
            if (showRay2) {
                const p1x = arrowX, p1y = rayY;
                const p2x = lensX, p2y = HEIGHT / 2;
                drawAnimatedRay(p1x, p1y, p2x, p2y, p3x, p3y, ray2Progress, PURPLE, isVirtual);
            }
            if (showRay3) {
                const fPoint = lensX - focalLength;
                const slope = (HEIGHT / 2 - rayY) / (fPoint - arrowX);
                const yLens3 = rayY + slope * (lensX - arrowX);
                const p1x = arrowX, p1y = rayY;
                const p2x = lensX, p2y = yLens3;
                drawAnimatedRay(p1x, p1y, p2x, p2y, p3x, p3y, ray3Progress, ORANGE, isVirtual);
            }
        }

        function drawButton(button) {
            ctx.fillStyle = GRAY;
            ctx.fillRect(button.rect.x, button.rect.y, button.rect.w, button.rect.h);
            const squareX = button.rect.x + 5;
            const squareY = button.rect.y + (button.rect.h - squareSize) / 2;
            let isActive;
            if (button.text === 'Rayo 1') isActive = showRay1;
            else if (button.text === 'Rayo 2') isActive = showRay2;
            else if (button.text === 'Rayo 3') isActive = showRay3;
            else isActive = showImage;
            ctx.fillStyle = isActive ? button.color : 'transparent';
            ctx.strokeStyle = button.color;
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.rect(squareX, squareY, squareSize, squareSize);
            if (isActive) ctx.fill();
            else ctx.stroke();
            ctx.font = '14px Arial';
            ctx.fillStyle = button.color;
            ctx.fillText(button.text, button.rect.x + squareSize + 10, button.rect.y + button.rect.h / 2 + 5);
        }

        function drawSlider() {
            ctx.fillStyle = GRAY;
            ctx.fillRect(sliderX, sliderY, sliderWidth, sliderHeight);
            ctx.fillStyle = BLACK;
            ctx.fillRect(sliderHandleX, sliderY - (sliderHandleHeight - sliderHeight) / 2, sliderHandleWidth, sliderHandleHeight);
            ctx.font = '20px Arial';
            ctx.fillStyle = BLACK;
            ctx.fillText('Altura', sliderX, sliderY + 35);
            ctx.fillStyle = GRAY;
            ctx.fillRect(objectSliderX, objectSliderY, objectSliderWidth, objectSliderHeight);
            ctx.fillStyle = BLACK;
            ctx.fillRect(objectSliderHandleX, objectSliderY - (objectSliderHandleHeight - objectSliderHeight) / 2, objectSliderHandleWidth, objectSliderHandleHeight);
            ctx.fillStyle = BLACK;
            ctx.fillText('Posición Objeto', objectSliderX, objectSliderY + 35);
        }

        function drawGrid() {
            ctx.strokeStyle = LIGHT_GRAY;
            ctx.lineWidth = 1;
            for (let y = HEIGHT / 2 - arrowHeight - 20; y <= HEIGHT / 2 + arrowHeight + 20; y += 10) {
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(WIDTH, y);
                ctx.stroke();
            }
            for (let x = 0; x <= WIDTH; x += 10) {
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, HEIGHT);
                ctx.stroke();
            }
        }

        function updateLoop() {
            ctx.clearRect(0, 0, WIDTH, HEIGHT);
            const objectDistance = lensX - arrowX;
            let [imageDistance, magnification] = calculateImagePosition(objectDistance, focalLength);
            let imageX, imageHeight, pointImageHeight, isVirtual;
            if (imageDistance === Infinity) {
                imageX = WIDTH * 2;
                imageHeight = -Infinity;
                pointImageHeight = -(WIDTH / objectDistance) * rayHeight;
                isVirtual = false;
            } else {
                imageX = lensX + imageDistance;
                imageHeight = magnification * arrowHeight;
                pointImageHeight = magnification * rayHeight;
                isVirtual = imageDistance < 0;
            }
            const rayY = HEIGHT / 2 - rayHeight;
            const imageTipY = HEIGHT / 2 - pointImageHeight;

            drawGrid();
            drawOpticalAxis();
            drawLens(lensX, lensHeight);
            drawFocalPoints(lensX, focalLength);
            drawArrow(arrowX, HEIGHT / 2, arrowHeight);
            if (showRay1 || showRay2 || showRay3) {
                drawRays(arrowX, rayY, lensX, focalLength, imageX, imageTipY, isVirtual);
            }
            if (showImage && imageDistance !== Infinity) {
                drawArrow(imageX, HEIGHT / 2, imageHeight, RED, isVirtual);
            }
            if (showRay1 || showRay2 || showRay3) {
                ctx.beginPath();
                ctx.arc(arrowX, rayY, 5, 0, 2 * Math.PI);
                ctx.fillStyle = BLUE;
                ctx.fill();
                if (showImage && imageDistance !== Infinity) {
                    ctx.beginPath();
                    ctx.arc(imageX, imageTipY, 5, 0, 2 * Math.PI);
                    ctx.fill();
                }
            }
            if (showRay1 && ray1Progress < 1.0) ray1Progress = Math.min(1.0, ray1Progress + animationSpeed);
            if (showRay2 && ray2Progress < 1.0) ray2Progress = Math.min(1.0, ray2Progress + animationSpeed);
            if (showRay3 && ray3Progress < 1.0) ray3Progress = Math.min(1.0, ray3Progress + animationSpeed);
            buttons.forEach(drawButton);
            drawSlider();
            requestAnimationFrame(updateLoop);
        }

        function getMousePos(e) {
            const rect = canvas.getBoundingClientRect();
            const scaleX = canvas.width / rect.width;
            const scaleY = canvas.height / rect.height;
            return {
                x: (e.clientX - rect.left) * scaleX,
                y: (e.clientY - rect.top) * scaleY
            };
        }

        canvas.addEventListener('mousedown', (e) => {
            const { x, y } = getMousePos(e);
            buttons.forEach(button => {
                if (x >= button.rect.x && x <= button.rect.x + button.rect.w &&
                    y >= button.rect.y && y <= button.rect.y + button.rect.h) {
                    button.toggle();
                }
            });
            if (x >= sliderHandleX && x <= sliderHandleX + sliderHandleWidth &&
                y >= sliderY - (sliderHandleHeight - sliderHeight) / 2 &&
                y <= sliderY - (sliderHandleHeight - sliderHeight) / 2 + sliderHandleHeight) {
                sliderDragging = true;
            }
            if (x >= objectSliderHandleX && x <= objectSliderHandleX + objectSliderHandleWidth &&
                y >= objectSliderY - (objectSliderHandleHeight - objectSliderHeight) / 2 &&
                y <= objectSliderY - (objectSliderHandleHeight - objectSliderHeight) / 2 + objectSliderHandleHeight) {
                objectSliderDragging = true;
            }
        });

        canvas.addEventListener('mouseup', () => {
            sliderDragging = false;
            objectSliderDragging = false;
        });

        canvas.addEventListener('mousemove', (e) => {
            if (sliderDragging || objectSliderDragging) {
                const { x } = getMousePos(e);
                if (sliderDragging) {
                    sliderHandleX = Math.max(sliderX, Math.min(sliderX + sliderWidth, x));
                    rayHeight = (sliderHandleX - sliderX) / sliderWidth * arrowHeight;
                    if (showRay1) ray1Progress = 0.0;
                    if (showRay2) ray2Progress = 0.0;
                    if (showRay3) ray3Progress = 0.0;
                }
                if (objectSliderDragging) {
                    objectSliderHandleX = Math.max(objectSliderX, Math.min(objectSliderX + objectSliderWidth, x));
                    const frac = (objectSliderHandleX - objectSliderX) / objectSliderWidth;
                    const objectDistance = minObjectDistance + frac * (maxObjectDistance - minObjectDistance);
                    arrowX = lensX - objectDistance;
                    if (showRay1) ray1Progress = 0.0;
                    if (showRay2) ray2Progress = 0.0;
                    if (showRay3) ray3Progress = 0.0;
                }
            }
        });

        requestAnimationFrame(updateLoop);
    </script>
</body>
</html>
